/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Boot = xdc.useModule('ti.catalog.arm.cortexm4.tiva.ce.Boot');
var Startup = xdc.useModule('xdc.runtime.Startup');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var GateAll = xdc.useModule('ti.sysbios.gates.GateAll');
var FatFS = xdc.useModule('ti.sysbios.fatfs.FatFS');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Memory = xdc.useModule('xdc.runtime.Memory');
Boot.oscSrc = Boot.OSCSRC_INT;
Boot.xtal = Boot.XTAL_16MHZ;
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = true;
Idle.idleFxns[0] = null;
Idle.idleFxns[1] = null;
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "ihUSB";
Program.global.ihUSB = Hwi.create(58, "&USB_hwiHandler", hwi0Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "ihSSI2";
Program.global.ihSSI2 = Hwi.create(70, "&SPIFlashIntHandler", hwi1Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "ihPatternTrigger";
hwi2Params.priority = -1;
Program.global.ihPatternTrigger = Hwi.create(93, "&Pattern_trig_int_handler", hwi2Params);
var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "ihLCD0";
Program.global.ihLCD0 = Hwi.create(113, "&DisplayIntHandler", hwi3Params);
var hwi4Params = new Hwi.Params();
hwi4Params.instance.name = "ihFrameTrigger";
hwi4Params.priority = -1;
Program.global.ihFrameTrigger = Hwi.create(92, "&Frame_trig_int_hander", hwi4Params);
var hwi5Params = new Hwi.Params();
hwi5Params.instance.name = "hwiUART4";
Program.global.hwiUART4 = Hwi.create(73, "&UARTStdioIntHandler", hwi5Params);
var hwi6Params = new Hwi.Params();
hwi6Params.instance.name = "hwiScanButton";
Program.global.hwiScanButton = Hwi.create(103, "&HandleScanButtonInterrupt", hwi6Params);
Semaphore.supportsEvents = false;
var task0Params = new Task.Params();
task0Params.instance.name = "ScanHandle";
task0Params.vitalTaskFlag = true;
task0Params.stackSize = 8192;
task0Params.priority = 10;
Program.global.ScanHandle = Task.create("&PerformScan", task0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "semPktRecd";
semaphore1Params.mode = Semaphore.Mode_BINARY;
Program.global.semPktRecd = Semaphore.create(null, semaphore1Params);
BIOS.customCCOpts = "--endian=little -mv7M4 --abi=eabi --float_support=fpv4spd16 -q -ms --opt_for_speed=2  --program_level_compile -o3 -g --optimize_with_debug";
Program.stack = 8192;
BIOS.heapSize = 28672;
var task1Params = new Task.Params();
task1Params.instance.name = "usbCmdHandler";
task1Params.priority = 9;
task1Params.stackSize = 8192;
Program.global.usbCmdHandler = Task.create("&usbCmdHandlerTask", task1Params);
var semaphore1Params0 = new Semaphore.Params();
semaphore1Params0.instance.name = "scanSem";
semaphore1Params0.mode = Semaphore.Mode_BINARY;
Program.global.scanSem = Semaphore.create(null, semaphore1Params0);
var hwi7Params = new Hwi.Params();
hwi7Params.instance.name = "ihDRDY";
hwi7Params.priority = -1;
Program.global.ihDRDY = Hwi.create(94, "&DRDY_int_handler", hwi7Params);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "endScanSem";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.endScanSem = Semaphore.create(null, semaphore2Params);
var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "readADCSem";
semaphore3Params.mode = Semaphore.Mode_BINARY;
Program.global.readADCSem = Semaphore.create(null, semaphore3Params);
var semaphore4Params = new Semaphore.Params();
semaphore4Params.instance.name = "BLEStartSem";
semaphore4Params.mode = Semaphore.Mode_BINARY;
Program.global.BLEStartSem = Semaphore.create(0, semaphore4Params);
var hwi10Params = new Hwi.Params();
hwi10Params.instance.name = "hwiHDCDRDY";
Program.global.hwiHDCDRDY = Hwi.create(99, "&GPIOP7IntHandler", hwi10Params);
var hwi11Params = new Hwi.Params();
hwi11Params.instance.name = "hwiTMPDRDY";
Program.global.hwiTMPDRDY = Hwi.create(98, "&GPIOP6IntHandler", hwi11Params);
var semaphore9Params = new Semaphore.Params();
semaphore9Params.instance.name = "BLEEndSem";
semaphore9Params.mode = Semaphore.Mode_BINARY;
Program.global.BLEEndSem = Semaphore.create(null, semaphore9Params);
var timer0Params = new Timer.Params();
timer0Params.instance.name = "NanoTimer2";
timer0Params.period = 250000;
timer0Params.runMode = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_CONTINUOUS;
Program.global.NanoTimer2 = Timer.create(2, "&nano_timer_handler", timer0Params);
var semaphore10Params = new Semaphore.Params();
semaphore10Params.instance.name = "semBLECmdRecd";
semaphore10Params.mode = Semaphore.Mode_BINARY;
Program.global.semBLECmdRecd = Semaphore.create(0, semaphore10Params);
var semaphore11Params = new Semaphore.Params();
semaphore11Params.instance.name = "semBLECmdComp";
semaphore11Params.mode = Semaphore.Mode_BINARY;
Program.global.semBLECmdComp = Semaphore.create(0, semaphore11Params);
var hwi10Params0 = new Hwi.Params();
hwi10Params0.instance.name = "hwiWAKEButton";
Program.global.hwiWAKEButton = Hwi.create(57, "&HibernateHandler", hwi10Params0);
var semaphore12Params = new Semaphore.Params();
semaphore12Params.instance.name = "BLENotifySem";
semaphore12Params.mode = Semaphore.Mode_BINARY;
Program.global.BLENotifySem = Semaphore.create(0, semaphore12Params);
var hwi11Params0 = new Hwi.Params();
hwi11Params0.instance.name = "hwiDLPCErr";
Program.global.hwiDLPCErr = Hwi.create(107, "&GPIOQ7IntHandler", hwi11Params0);
var hwi12Params = new Hwi.Params();
hwi12Params.instance.name = "hwiSD";
Program.global.hwiSD = Hwi.create(104, "&HandleSDCardDetectInterrupt", hwi12Params);
var semaphore9Params0 = new Semaphore.Params();
semaphore9Params0.instance.name = "semUARTPktRecd";
semaphore9Params0.mode = Semaphore.Mode_BINARY;
Program.global.semUARTPktRecd = Semaphore.create(null, semaphore9Params0);
var timer1Params = new Timer.Params();
timer1Params.instance.name = "NanoSlewTimer";
timer1Params.period = 30;
timer1Params.runMode = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_CONTINUOUS;
Program.global.NanoSlewTimer = Timer.create(3, "&Slew_timer_handler", timer1Params);
var hwi13Params = new Hwi.Params();
hwi13Params.instance.name = "hwiScanExpButton";
Program.global.hwiScanExpButton = Hwi.create(68, "&HandleScanButtonInterrupt", hwi13Params);
var task2Params = new Task.Params();
task2Params.instance.name = "ScanInterpretHandle";
task2Params.priority = 8;
task2Params.stackSize = 4352;
Program.global.ScanInterpretHandle = Task.create("&InterpretScan", task2Params);
var semaphore10Params0 = new Semaphore.Params();
semaphore10Params0.instance.name = "scanInterpretSem";
semaphore10Params0.mode = Semaphore.Mode_BINARY;
Program.global.scanInterpretSem = Semaphore.create(null, semaphore10Params0);
